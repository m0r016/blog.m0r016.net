{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"ReadMe","text":"プライバシーポリシー 個人情報の利用目的当サイトでは、お問い合わせや記事へのコメントの際、名前やメールアドレス等の個人情報を入力頂く場合がございます。取得した個人情報は、お問い合わせに対する回答や、必要な情報を電子メールなどでご連絡する際にご利用させていただくものであり、これらの目的以外では利用いたしません。 広告について当サイトでは、Google Adsenseを利用しており、ユーザーの興味に応じた商品や、サービスの広告を表示するため、Cokkieを使用しています。Cokkieを無効化する方法や、Google Adsenseに関する詳細は広告 - ポリシーと規約をご確認ください。 アクセス解析ツールについて当サイトでは、Googleによるアクセス解析ツール、Google Analyticsを利用しています。このGoogle Analyticsはトラフィックデータの収集のためにCookieを使用しています。このトラフィックデータは匿名で収集されており、個人を特定するものではありません。 この機能はCookieを無効化することで収集を無効化することができますので、お使いのブラウザの設定をご確認ください。この規約に関しての詳細はGoogle Analyticsサービス利用規約やGoogleポリシーと規約をご覧ください。 免責事項 当サイトのコンテンツ・情報について、できる限り正確な情報を提供するように努めておりますが、正確性や安全性を保証するものではありません、情報が古くなっていることもございます。当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねますのでご了承ください。 著作権について 当サイトで掲載している文章や画像につきましては、無断転載することを禁止します。 当サイトは著作権や肖像権の侵害を目的としたものではありません。著作権や肖像権に関して何か問題がございましたら、TwitterやMastodonまでご連絡ください。 リンクについて 当サイトはリンクフリーです。リンクを行う際の許可や連絡は不要です。ただし、画像の直リンクはご遠慮ください","link":"/readme/index.html"}],"posts":[{"title":"ラズパイを用いて重量を図ってみる。","text":"目次 はじめに 環境 1.ADコンバータを組み立てる 1.ロードセル(VLS-50K)の配線確認 3.ADコンバータとRaspberry Piを接続する 4.動作確認 最後に はじめにロードセルという重量を図るものをRaspberry Piに接続し、それを見ることはできないか、と言われ調べてやってみたことをここに記す。Googleで検索してみてもこの話題は出てこないため、少しでも参考になればいいなと思う。 環境・SSH接続が可能なRaspberry Pi 3b+ (Python 2.7.16 Raspbian)・ロードセル(VLS-50K)・ADコンバータ(hx711)・ジャンパ線・ネット環境 1.ADコンバータを組み立てる入手できたhx711は端子台の取り付けが必要だったためはんだ付けを施した。出来栄えはこんな感じ↓ 表面 裏面 裏面のJ3, J4はBチャンネルを使用しない場合にGNDに接続するはんだジャンパーらしい。今回はBチャンネルを使わないのではんだジャンパをした。 はんだジャンパとははんだで二点(ここではJ3とJ4)を繋げる方法だ。 1.ロードセル(VLS-50K)の配線確認製品サイトの配線接続図を見た。+入力の赤, +出力の緑, -入力の白, -出力の黒, シールドとある。シールドは透明なようだ。 hx711の取説を見るにCN2, CN3が該当すると考えられる。 CN2-1がロードセル用電源とあるので、赤CN2-2がGND(グラウンド)、白CN3-1がAch-入力とあるので、緑CN3-2がAch-入力とあるので、黒 線の色 hx711側 赤 CN2-1 白 CN2-2 黒 CN3-1 緑 CN3-2 ↑の通りにA/Dコンバータとロードセルを接続した。 3.ADコンバータとRaspberry Piを接続するADコンバータのCN1に接続する。 CN1-1が電源入力(VDD)とあるので、2CN1-2がデータ出力(DAT)とあるので、39CN1-3がクロック入力(CLK)とあるので、31CN1-6がGNDとあるので6CN1-4, 5はBチャンネル用なので使用しない。 線の色 ラズパイ側 VDD 2(5v) DAT 39(GPIO5) CLK 31(GPIO6) GND 6(GND) INNB none INPB none ↑の通りにA/DコンバータとRaspberry Piを接続した GPIOのポートについてはここを参考にしてほしい→GPIO 4.動作確認接続ができたら動作確認をする。(SSH,Python実行環境は既に構築できているものとする) リポジトリはtatobari氏のものを使った→tatobari 12345ssh [id]@[ipaddress]git clone https://github.com/tatobari/hx711pycd hx711pypython setup.py installpython example.py コンソール上に数字列が数秒おきに出力された。成功だ。 最後に簡易的ではあるがロードセルの値を拾うことができた、次はcsvに落とし込んでみたい。","link":"/2021/03/05/use-loadcell-by-raspi/"},{"title":"Ammo UI Exを導入した","text":"実行したことAmmo UI Exを導入し弾薬の名前を英語表記にする 目次 概要 したこと 導入成功 Stringsファイルの変更 P.S. 概要私の好きなModder、Tooun氏のAmmo UI HUDのEx版を入手したので導入する。 したこといつも通り、MO2からインストールする。MO2は管理が楽でいい 導入成功無事導入に成功した、実際に動画のようなHUDになってくれてうれしい。(HP, APバーなど要所要所は書き換えている) Stringsファイルの変更modページにも書いてあるが、弾薬名称が英語以外の文字を含んでいると文字化けしてしまうらしい。そのためxTranslatorで弾薬名称を変更した。xmlファイルを配布しておく、DLC以外には対応してるはず→ダウンロード 英語環境であれば保存した際にFallout_ja.*と生成されてしまうので認識されるようにFallout_en.*と書き換える必要がある P.S.UIの位置や自分のアイコンを指定し終了。うちの子はかわいいな","link":"/2021/03/06/install-ammo-ex/"},{"title":"hexoのテーマをapolloからicarusに変更する","text":"はじめにhexoのテーマ変更が何気ややこしかったので備忘録としてここに記す。参考になれば幸いだ。 実行したことhexoのテーマをapolloからicarusに変更する 目次 概要 1.前提パッケージを準備する 2.icarusを追加する 3._config.ymlを変更しicarus側の変更も加える 4.Githubにアップロードする 5.動作確認して終了 参考 概要apolloを採用していたが、ネットサーフィンをしていたところ、icarusというものを発見。これに変更する 1.前提パッケージを準備するicarusには前提パッケージが必要らしい。知らずにgithubに上げてしまい、netlify側でエラーを吐かれた。 123cd hexo-directorynpm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.10.5 inferno@^7.3.3 inferno-create-element@^7.3.3npm audit fix 2.icarusを追加するgit cloneでもいいのだが、変更を加える場合があるのでgit submoduleする 1git submodule add https://github.com/ppoffice/hexo-theme-icarus 3._config.ymlを変更しicarus側の変更も加えるhexoに読み込ませるためthemeを変更する 12hexo config theme icarushexo s この時点で一度icarusに変わっている確認するといいだろう。hexo-ditectory下に_config.icarus.ymlに生成されているはず、これに変更を加えていく。適所自分に変更してほしい。 1234567891011# Version of the configuration file(省略)head: manifest: name: your-blog-name shot_name: your-blog-short-name start_url: your-blog-url open_graph: twitter_card: summary twitter_id: your-id twitter_site: your-twitter-url open_graph内のtwitter_cardとは、TwitterにURLを張り付けたときにURLのみではなく一部の中身の情報が見れる機能のことである。ここではsummaryを選択した。ツイートをカードで最適化する 1234567navbar: menu: Home: / Archives: /archives Tags: /tags About: /About ReadMe: /readme AboutやReadMeは初めから生成されておらず、ブラウザからアクセスすると404エラーが出る。そのためhexo new page &quot;about&quot;と打つとsource/_posts下に生成されるのではなくsource/下に生成され、参照できるようになる。 1234links: your-sns: icon: your-sns-icon url: 'your-sns-url' your-sns-iconはここのサイトにアクセスし 検索窓からsnsの名前を入力、使いたいアイコンをクリックし のfab~の部分をyour-sns-iconに入力するとアイコンが反映される。 1234567891011121314widgets: author: your-name author_title: your-title location: your-location avator: your-avator.png avator_rounded: true #アイコンの角を丸くするかどうか follow_ling: your-follow-url social_links: Github: icon: fab fa-github url: your-github-url Twitter: icon: fab fa-twitter url: your-twitter-url 変更したのは大体この程度だ。hexo sで確認しておくとよいだろう。ポート指定はhexo s -p port 4.Githubにアップロードする123git add .git commit -m &quot;change themes/icarus&quot;git push origin master 5.動作確認して終了netlifyにdeployさせて終了、反映されていた。ここまで細かくいじれるとなると楽しい。ほかにもいじれる箇所は多いので、調べてみると面白いだろう。 参考icarusの公式ドキュメント","link":"/2021/03/05/change-theme/"},{"title":"Fallout4のespファイルが増えてきたのでespFE化する","text":"実行したことModを入れていくうちにespファイルが多くなってしまったのでespFE化をする。 目次 1.espFE？ 2.ロードオーダーの話 3.espFEファイルとは 4.Fo4editの準備 5.変換作業 P.S. 1.espFE？Fallout4のデータファイルにはさまざまな形式があるが、modを構成する際によく使うesm, esp, eslファイルとある。esm, espファイルはロードオーダーを00-FDまで使ってしまうが、eslファイルとはロードオーダーのFEの部分を利用する。そうすることでFDまでという制限を突破し、より多くのmodを導入することができるようになる。 2.ロードオーダーの話Fallout4のオブジェクトにはForm IDというものがある。いくらmodを入れようが、ある値を超えなければ同じForm IDを使うことはない。つまりAよりBのほうが大きい場合、Aの機能がBに上書きされてしまい、Aの機能が使えなくなる、といったことが避けられるのだ。Form IDは8ケタで表記されるが、最上位2桁はロードオーダー順になる。01 ,02 ,03といった感じだ。espとeslの違いはここにある。espは下6桁をすべて使えるのだが、eslは下2桁を使えない。espは多くのForm IDが扱え、eslは少ないForm IDしか使えない。eslの最上位2桁はFEに固定され、次の3桁がesl内のロードオーダーの順番に使われる。以降の3桁(800-FFF)までがeslとして利用できるForm IDとなる。eslの最上位2ケタはFEで固定される。次に続く3ケタはesl間のロードを表し、000～FFFまでの4096個がeslを導入できる理論上の上限となる。 3.espFEファイルとはespファイルにESLフラグをつけ、拡張子はそのままでeslとして使えるようにしたファイルのことである。外見は変わらないが中身が変わっているといったイメージだ。eslファイルに対しespFEのロード順は好きに変更することができる。 4.Fo4editの準備Fo4editをダウンロードし、任意の場所に展開、FO4Edit.exeを右クリックしショートカットを作成、プロパティを開きリンク先に -PseudoESLと追加。これでespFE化できるファイルを選別し表示してくれる。(MO2のユーザーはMO2から起動するように設定する) 5.変換作業Fo4editを起動したらダイアログが出てくる。 プラグインにチェックマークを付け、OKを押す。 右にBackground Loader: finishedと表示されるまで待つ。 左側にForm IDとありその下に[FE XXX]と表示されているものがあるだろう。それがespFE化が可能なesp達だ。 選択したらダブルクリックする。そうすると右側の画面にmodの中身が表示される。Record Header内のRecord Flagsをダブルクリック。 警告画面が出てくるので、Yes I’m absolutely sureをクリック 真ん中あたりにあるeslの右側にあるチェックボックスをクリック するとespFE化が完了する。Ctrl + Sで保存することができる P.S.だいぶ減った。素晴らしい・・・mod沼がこうすることでもっと深くなってしまうんだな","link":"/2021/03/07/convert-esp-to-espfe/"},{"title":"shareボタンを導入する","text":"実行したことhexoにshareボタンを導入する 目次 1.icarusをforkする 2._config.icarus.ymlを編集する 3.share bottonを取得する 4.shareボタンの設定 5.動作確認 P.S. 参考 1.icarusをforkするどうせなら変更もgithub上で管理できるようにしておきたいのでicarusをforkする。forkしたものをsubmoduleとして追加。 1git submodule add https://github.com/m0r016/hexo-theme-icarus.git これでsubmoduleとして追加することができた。 2._config.icarus.ymlを編集するshareを探す。 123456# Share plugin configurations# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/share: type: sharethis # URL to the ShareThis share plugin script install_url: '' とある。ここに設定の変更方法が書いてあるらしいので見てみる。 addtoanyがシンプルに済みそうだ。addtoanyに変更 12share: type: addtoany 3.share bottonを取得するAddToAnyで取得できるらしい。“Get the Share Botton”とあるのでクリック、”Any Website”を選択。”Choose Services”で適当に選択。”Get Button Code”で必要なコードを入手することができる。 4.shareボタンの設定AddToAnyのレイアウトファイルをリポジトリから引っ張ってくる必要があるらしい。これを/themes/icarus/layout/search/addtoany.jsxに書き込み、AddToAnyで入手したコードを貼り付ける。 1234567891011121314151617181920212223242526272829const { Component, Fragment } = require('inferno');- const { cacheComponent } = require('../../util/cache');+ const { cacheComponent } = require('hexo-component-inferno/lib/util/cache');...Some code is skipped here...class AddToAny extends Component { render() { return &lt;Fragment&gt;- &lt;div class=&quot;a2a_kit a2a_kit_size_32 a2a_default_style&quot;&gt;- &lt;a class=&quot;a2a_dd&quot; href=&quot;https://www.addtoany.com/share&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_facebook&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_twitter&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_telegram&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_whatsapp&quot;&gt;&lt;/a&gt;- &lt;a class=&quot;a2a_button_reddit&quot;&gt;&lt;/a&gt;- &lt;/div&gt;- &lt;script src=&quot;https://static.addtoany.com/menu/page.js&quot; defer={true}&gt;&lt;/script&gt;+ &lt;!-- AddToAny HTML code you just got... --&gt;+ &lt;div class=&quot;a2a_kit a2a_kit_size_32 a2a_default_style&quot;&gt;+ &lt;a class=&quot;a2a_dd&quot; href=&quot;https://www.addtoany.com/share&quot;&gt;&lt;/a&gt;+ &lt;a class=&quot;a2a_button_facebook&quot;&gt;&lt;/a&gt;+ &lt;a class=&quot;a2a_button_twitter&quot;&gt;&lt;/a&gt;+ &lt;a class=&quot;a2a_button_email&quot;&gt;&lt;/a&gt;+ &lt;/div&gt;+ &lt;script async src=&quot;https://static.addtoany.com/menu/page.js&quot;&gt;&lt;/script&gt; &lt;/Fragment&gt;; }} 保存して終了。 5.動作確認hexo gをして問題ないことを確認、gitにpushする。 きちんと反映されている。 P.S.下の著作権表記が少し邪魔に感じるのでどこかにまとめておきたいところ 参考Icarus User Guide - Share Buttons","link":"/2021/03/06/install-share-botton/"},{"title":"Ubuntuを自動アップデートする","text":"はじめにUbuntu使う際に毎回sudo apt update &amp;&amp; sudo apt upgradeを打つのがめんどくさいため、自動でアップデートしてくれるようにする。 目次 1./etc/apt/apt.conf.d/20auto-upgradesを編集する 2./etc/apt/apt.conf.d/50unattended-upgradesを編集する 3.保存して終了 1./etc/apt/apt.conf.d/20auto-upgradesを編集する/etc/apt/apt.conf.d/にはパッケージ管理システムaptの設定が含まれている。20auto-upgradesを確認しなければならないので一応確認する。 123nano /etc/apt/apt.conf.d/APT::Periodic::Update-Package-Lists &quot;1&quot;; #自動でパッケージリストをアップデートするかAPT::Periodic::Unattended-Upgrade &quot;1&quot;; #自動でアップデートするか 2./etc/apt/apt.conf.d/50unattended-upgradesを編集する自動アップデートの設定だ。自分に合わせ、適所変更してほしい。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125nano /etc/apt/apt.conf.d/50unattended-upgrades// Automatically upgrade packages from these (origin:archive) pairs//// Note that in Ubuntu security updates may pull in new dependencies// from non-security sources (e.g. chromium). By allowing the release// pocket these get automatically pulled in.Unattended-Upgrade::Allowed-Origins { &quot;${distro_id}:${distro_codename}&quot;; &quot;${distro_id}:${distro_codename}-security&quot;; // Extended Security Maintenance; doesn't necessarily exist for // every release and this system may not have it installed, but if // available, the policy for updates is such that unattended-upgrades // should also install from here by default. &quot;${distro_id}ESMApps:${distro_codename}-apps-security&quot;; &quot;${distro_id}ESM:${distro_codename}-infra-security&quot;; &quot;${distro_id}:${distro_codename}-updates&quot;;// &quot;${distro_id}:${distro_codename}-proposed&quot;;// &quot;${distro_id}:${distro_codename}-backports&quot;;};// updatesまでは許可することにした。//を消すことにより、有効化することができる。// Python regular expressions, matching packages to exclude from upgradingUnattended-Upgrade::Package-Blacklist { // The following matches all packages starting with linux-// &quot;linux-&quot;; // Use $ to explicitely define the end of a package name. Without // the $, &quot;libc6&quot; would match all of them.// &quot;libc6$&quot;;// &quot;libc6-dev$&quot;;// &quot;libc6-i686$&quot;; // Special characters need escaping// &quot;libstdc\\+\\+6$&quot;; // The following matches packages like xen-system-amd64, xen-utils-4.1, // xenstore-utils and libxenstore3.0// &quot;(lib)?xen(store)?&quot;; // For more information about Python regular expressions, see // https://docs.python.org/3/howto/regex.html};// This option controls whether the development release of Ubuntu will be// upgraded automatically. Valid values are &quot;true&quot;, &quot;false&quot;, and &quot;auto&quot;.Unattended-Upgrade::DevRelease &quot;auto&quot;;// Split the upgrade into the smallest possible chunks so that// they can be interrupted with SIGTERM. This makes the upgrade// a bit slower but it has the benefit that shutdown while a upgrade// is running is possible (with a small delay)//Unattended-Upgrade::MinimalSteps &quot;true&quot;;// Install all updates when the machine is shutting down// instead of doing it in the background while the machine is running.// This will (obviously) make shutdown slower.// Unattended-upgrades increases logind's InhibitDelayMaxSec to 30s.// This allows more time for unattended-upgrades to shut down gracefully// or even install a few packages in InstallOnShutdown mode, but is still a// big step back from the 30 minutes allowed for InstallOnShutdown previously.// Users enabling InstallOnShutdown mode are advised to increase// InhibitDelayMaxSec even further, possibly to 30 minutes.//Unattended-Upgrade::InstallOnShutdown &quot;false&quot;;// Send email to this address for problems or packages upgrades// If empty or unset then no email is sent, make sure that you// have a working mail setup on your system. A package that provides// 'mailx' must be installed. E.g. &quot;user@example.com&quot;//Unattended-Upgrade::Mail &quot;&quot;;// Set this value to one of:// &quot;always&quot;, &quot;only-on-error&quot; or &quot;on-change&quot;// If this is not set, then any legacy MailOnlyOnError (boolean) value// is used to chose between &quot;only-on-error&quot; and &quot;on-change&quot;//Unattended-Upgrade::MailReport &quot;on-change&quot;;// Remove unused automatically installed kernel-related packages// (kernel images, kernel headers and kernel version locked tools).//Unattended-Upgrade::Remove-Unused-Kernel-Packages &quot;true&quot;;// Do automatic removal of newly unused dependencies after the upgrade//Unattended-Upgrade::Remove-New-Unused-Dependencies &quot;true&quot;;// Do automatic removal of unused packages after the upgrade// (equivalent to apt-get autoremove)//Unattended-Upgrade::Remove-Unused-Dependencies &quot;false&quot;;// Automatically reboot *WITHOUT CONFIRMATION* if// the file /var/run/reboot-required is found after the upgradeUnattended-Upgrade::Automatic-Reboot &quot;true&quot;;// 自動で適用してほしいのでtrue// If automatic reboot is enabled and needed, reboot at the specific// time instead of immediately// Default: &quot;now&quot;Unattended-Upgrade::Automatic-Reboot-Time &quot;05:00&quot;;// 再起動する時間を決める。24時間表記だ// Use apt bandwidth limit feature, this example limits the download// speed to 70kb/sec//Acquire::http::Dl-Limit &quot;70&quot;;// Enable logging to syslog. Default is False// Unattended-Upgrade::SyslogEnable &quot;false&quot;;// Specify syslog facility. Default is daemon// Unattended-Upgrade::SyslogFacility &quot;daemon&quot;;// Download and install upgrades only on AC power// (i.e. skip or gracefully stop updates on battery)// Unattended-Upgrade::OnlyOnACPower &quot;true&quot;;// Download and install upgrades only on non-metered connection// (i.e. skip or gracefully stop updates on a metered connection)// Unattended-Upgrade::Skip-Updates-On-Metered-Connections &quot;true&quot;;// Verbose logging// Unattended-Upgrade::Verbose &quot;false&quot;;// Print debugging information both in unattended-upgrades and// in unattended-upgrade-shutdown// Unattended-Upgrade::Debug &quot;false&quot;;// Allow package downgrade if Pin-Priority exceeds 1000// Unattended-Upgrade::Allow-downgrade &quot;false&quot;; 3.保存して終了動作確認をし終了。","link":"/2021/03/10/ubuntu-auto-update/"},{"title":"Fallout4のCTDの原因を突き止める","text":"はじめにFallout4でmodを入れているとCTDが起きることがあるため、CTD対策Mod Buffout4を入れ、原因を突き止める。 目次 1.必要なもの 導入成功 おわりに 1.必要なもの必須項目に・本体(1.10.162.0以上)・F4SE・Address Library for F4SE Plugins・xSE PluginPreloader F4・TBB Redistributables・Microsoft Visual C++ Redistributable for Visual Studio 2019とあるので導入していく。導入されているmodによっては動かないこともあるので確認してほしい 導入成功無事導入に成功した、普通に遊んでいると/Document/My Games/Fallout4/F4SE下にcrash-logと生成されるので中身を読んでみる。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051Fallout 4 v1.10.163Buffout 4 v1.20.3Unhandled exception &quot;EXCEPTION_ACCESS_VIOLATION&quot; at 0x7FF710CC74CD Fallout4.exe+1CD74CDSETTINGS: [Compatibility] F4EE: false [Fixes] ActorIsHostileToActor: true CellInit: true EncounterZoneReset: true GreyMovies: true MovementPlanner: true PackageAllocateLocation: true SafeExit: true UnalignedLoad: true UtilityShader: true [Patches] Achievements: true BSTextureStreamerLocalHeap: true HavokMemorySystem: true MaxStdIO: -1 MemoryManager: true MemoryManagerDebug: false ScaleformAllocator: true SmallBlockAllocator: true WorkshopMenu: true [Warnings] CreateTexture2D: true ImageSpaceAdapter: trueSYSTEM SPECS: OS: Microsoft Windows 10 Pro v10.0.19041 CPU: GenuineIntel Intel(R) Core(TM) i7-3770K CPU @ 3.50GHz GPU #1: Nvidia GP107 [GeForce GTX 1050 Ti] GPU #2: Intel Xeon E3-1200 v2/3rd Gen Core processor Graphics Controller GPU #3: Microsoft Microsoft Basic Render Driver PHYSICAL MEMORY: 12.07 GB/14.95 GBPROBABLE CALL STACK: [0] 0x7FF710CC74CD Fallout4.exe+1CD74CD -&gt; 83066+0x2D [1] 0x7FF710CC60E5 Fallout4.exe+1CD60E5 -&gt; 503292+0x45 [2] 0x7FF70F3B7BCA Fallout4.exe+03C7BCA -&gt; 310686+0x3A [3] 0x7FF710B40F26 Fallout4.exe+1B50F26 -&gt; 329005+0xC6 [4] 0x7FF710B41432 Fallout4.exe+1B51432 -&gt; 194800+0x202 [5] 0x7FF710B43F67 Fallout4.exe+1B53F67 -&gt; 1492866+0x67 [6] 0x7FF710B0CFED Fallout4.exe+1B1CFED -&gt; 1079791+0x3D [7] 0x7FFF3E587034 KERNEL32.DLL+0017034 [8] 0x7FFF3FF3D241 ntdll.dll+004D241… とあるが、4行目のUnhandled exception &quot;EXCEPTION_ACCESS_VIOLATION&quot; at 0x7FF710CC74CD Fallout4.exe+1CD74CDや41行目のPROBABLE CALL STACK:以下が原因となっているらしい。この場合、1CD74CDが真っ先に引っかかるのでロードオーダーを見てみる。1Cがロードオーダーの番号だ。すると以外にも装備modが出てきた。抜いてみると、確かにCTDが減っていて、突然ゲームが落ちてしまうなどというストレスが減った。 おわりにこのほかにもCTDについては様々な原因があるが、modの依存によってCTDすることは少なくとも減るため、参考にしてほしい。他にも何か情報があれば、コメント欄にて是非。","link":"/2021/03/12/ctd-fix/"},{"title":"netlifyからgithub pagesに乗り換える","text":"はじめにnetlifyはサイトのロード時間が長いと感じたため、github pagesに乗り換えようと思う。 目次 github pagesとは 1.ブランチを作成する 2.hexo-deployer-gitをインストールする 3.deployする 4.pingを打ってみる。 おわりに github pagesとはgithub pagesとは、githubが運営しているウェブホスティングサービスだ。netlify同様、githubに上げたリポジトリをもとに、自動的に生成。もちろん送信すると自動的に再生成してくれる。 1.ブランチを作成するgithub pagesではリポジトリではなく、ブランチ単位で生成できるため、ブランチを生成する 1git branch public 2.hexo-deployer-gitをインストールするhexoにデプロイさせるため拡張機能をインストールする 1npm install hexo-deployer-git --save インストールが完了したら、hexo-deployer-gitをもとに設定を行う。_config.ymlを開き、追加していく。 12345nano _config.ymldeploy: type: git repo: your_repo branch: public _config.ymlを保存する。 3.deployする設定が完了したため、deployしていく。 1hexo clean &amp;&amp; hexo deploy デプロイが完了したら自分のリポジトリにアクセスし、Settingをクリック branchをpublicに指定、rootはそのままにsaveをする。 Custom domainが指定できるので指定したいドメインを追加。 CNAME、Aレコードどちらでも構わないが、私の場合CNAMEにした。 コンテンツはyourgithubid.github.ioDNSのみにしておかないと、いろいろとめんどくさいので注意が必要。 4.pingを打ってみる。本当にnetlifyからgithub pagesで配信されているのか調べるために、pingを打ってみた。 12ping blog.m0r016.netPING m0r016.github.io (185.199.109.153) 56(84) bytes of data. きちんと配信されていることがわかる。 おわりにnetlifyからgithub pagesに乗り換えて、自環境では読み込みが早くなったように感じるが、PageSpeed Insightsを見てみたが、割かしnetlifyのほうが早かった。何故だろうか・・・いろいろと調べてみたい。","link":"/2021/03/15/migration-github-pages/"},{"title":"母の裁縫日記 - 001","text":"きっかけコロナの影響でマスク不足となり、十何年ぶりにミシンを引っ張り出して布マスクを作ってみた。家族だったり、母に頼まれマスクを作ったのでありました。まだまだ布マスク作りは続きます・・・お楽しみに 娘の誕生日に猫の編みぐるみを作ってプレゼントをしました。 母が、ブログに母自身が作ったマスクを載せて欲しいと言われたので載せている。見ていただけると幸いだ。","link":"/2021/03/15/mother-sewing-dairy001/"},{"title":"出力されたロードセルの値をCSVに落とし込んでみる","text":"はじめにラズパイでロードセルの値を拾うことでできたが、csvにも残せたらグラフに表せたりするため、解析等が楽になると思った。 目次 1.ソースを見る 2.実装する 4.動作確認 5.最後に 参考 1.ソースを見るgithubのexample.pyを見る。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#! /usr/bin/python2import timeimport sysEMULATE_HX711=FalsereferenceUnit = 1if not EMULATE_HX711: import RPi.GPIO as GPIO from hx711 import HX711else: from emulated_hx711 import HX711def cleanAndExit(): print(&quot;Cleaning...&quot;) if not EMULATE_HX711: GPIO.cleanup() print(&quot;Bye!&quot;) sys.exit()hx = HX711(5, 6)# I've found out that, for some reason, the order of the bytes is not always the same between versions of python, numpy and the hx711 itself.# Still need to figure out why does it change.# If you're experiencing super random values, change these values to MSB or LSB until to get more stable values.# There is some code below to debug and log the order of the bits and the bytes.# The first parameter is the order in which the bytes are used to build the &quot;long&quot; value.# The second paramter is the order of the bits inside each byte.# According to the HX711 Datasheet, the second parameter is MSB so you shouldn't need to modify it.hx.set_reading_format(&quot;MSB&quot;, &quot;MSB&quot;)# HOW TO CALCULATE THE REFFERENCE UNIT# To set the reference unit to 1. Put 1kg on your sensor or anything you have and know exactly how much it weights.# In this case, 92 is 1 gram because, with 1 as a reference unit I got numbers near 0 without any weight# and I got numbers around 184000 when I added 2kg. So, according to the rule of thirds:# If 2000 grams is 184000 then 1000 grams is 184000 / 2000 = 92.#hx.set_reference_unit(113)hx.set_reference_unit(referenceUnit)hx.reset()hx.tare()print(&quot;Tare done! Add weight now...&quot;)# to use both channels, you'll need to tare them both#hx.tare_A()#hx.tare_B()while True: try: # These three lines are usefull to debug wether to use MSB or LSB in the reading formats # for the first parameter of &quot;hx.set_reading_format(&quot;LSB&quot;, &quot;MSB&quot;)&quot;. # Comment the two lines &quot;val = hx.get_weight(5)&quot; and &quot;print val&quot; and uncomment these three lines to see what it prints. # np_arr8_string = hx.get_np_arr8_string() # binary_string = hx.get_binary_string() # print binary_string + &quot; &quot; + np_arr8_string # Prints the weight. Comment if you're debbuging the MSB and LSB issue. val = hx.get_weight(5) print(val) # To get weight from both channels (if you have load cells hooked up # to both channel A and B), do something like this #val_A = hx.get_weight_A(5) #val_B = hx.get_weight_B(5) #print &quot;A: %s B: %s&quot; % ( val_A, val_B ) hx.power_down() hx.power_up() time.sleep(0.1) except (KeyboardInterrupt, SystemExit): cleanAndExit() 雰囲気、54行目のwhile文のtryの中にある 12val = hx.get_weight(5)print(val) ここを書き換えればcsvに落とせるのではないかと考えた。While文とは、条件式が真の間だけ、繰り返し実行するものである。 2.実装するまずプログラムに必要なものを取り込まなくてはならない。今回はcsvと時間が欲しいため、csvのアクセスを可能とするcsvと時間を取得するdatetimeを4行目以降に書き込んだ。 1234import timeimport sysimport csvimport datetime そして54行目付近の 12val = hx.get_weight(5)print(val) を書き換える。 今回は配列を使うことにした。配列とは変数に比べ、複数の要素を含むことができるもののことだ。 1234val = [0,0] #配列を用意するval[0] = datetime.datetime.now() #現在時間の取得(Raspberry Pi側で設定されている時間に依存する)val[1] = hx.get_weight(5) #ロードセルからの値を拾うprint('now time ' + str(val[0]) + ',' + ' now wight ' + str(val[1])) #時間,値となるようにターミナルに出力する 配列の準備は完了した。 次はcsvにアクセスする 123with open('./weight.csv', 'a') as f: #./にweight.csvを生成する、そこに追記するように書き込む('a') writer = csv.writer(f) writer.writerow(val) #配列の中身を書き込む 以上だ。 このようになった 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#! /usr/bin/python2import timeimport sysimport csvimport datetimeEMULATE_HX711=FalsereferenceUnit = 1if not EMULATE_HX711: import RPi.GPIO as GPIO from hx711 import HX711else: from emulated_hx711 import HX711def cleanAndExit(): print(&quot;Cleaning...&quot;) if not EMULATE_HX711: GPIO.cleanup() print(&quot;Bye!&quot;) sys.exit()hx = HX711(5, 6)# I've found out that, for some reason, the order of the bytes is not always the same between versions of python, numpy and the hx711 itself.# Still need to figure out why does it change.# If you're experiencing super random values, change these values to MSB or LSB until to get more stable values.# There is some code below to debug and log the order of the bits and the bytes.# The first parameter is the order in which the bytes are used to build the &quot;long&quot; value.# The second paramter is the order of the bits inside each byte.# According to the HX711 Datasheet, the second parameter is MSB so you shouldn't need to modify it.hx.set_reading_format(&quot;MSB&quot;, &quot;MSB&quot;)# HOW TO CALCULATE THE REFFERENCE UNIT# To set the reference unit to 1. Put 1kg on your sensor or anything you have and know exactly how much it weights.# In this case, 92 is 1 gram because, with 1 as a reference unit I got numbers near 0 without any weight# and I got numbers around 184000 when I added 2kg. So, according to the rule of thirds:# If 2000 grams is 184000 then 1000 grams is 184000 / 2000 = 92.#hx.set_reference_unit(113)hx.set_reference_unit(referenceUnit)hx.reset()hx.tare()print(&quot;Tare done! Add weight now...&quot;)# to use both channels, you'll need to tare them both#hx.tare_A()#hx.tare_B()while True: try: # These three lines are usefull to debug wether to use MSB or LSB in the reading formats # for the first parameter of &quot;hx.set_reading_format(&quot;LSB&quot;, &quot;MSB&quot;)&quot;. # Comment the two lines &quot;val = hx.get_weight(5)&quot; and &quot;print val&quot; and uncomment these three lines to see what it prints. # np_arr8_string = hx.get_np_arr8_string() # binary_string = hx.get_binary_string() # print binary_string + &quot; &quot; + np_arr8_string # Prints the weight. Comment if you're debbuging the MSB and LSB issue. val = [0,0] val[0] = datetime.datetime.now() val[1] = hx.get_weight(5) print('now time ' + str(val[0]) + ',' + ' now weight ' + str(val[1])) with open('./weight.csv', 'a') as f: writer = csv.writer(f) writer.writerow(val) # To get weight from both channels (if you have load cells hooked up # to both channel A and B), do something like this #val_A = hx.get_weight_A(5) #val_B = hx.get_weight_B(5) #print &quot;A: %s B: %s&quot; % ( val_A, val_B ) hx.power_down() hx.power_up() except (KeyboardInterrupt, SystemExit): cleanAndExit() 4.動作確認python example.py、ターミナルからはnow time 2021-03-06 19:59:06.036324, now weight -52と出力され、csvには2021-03-06 19:59:26.693445,562と保存されるようになった。これでGoogle Sheetsに落とし込んでグラフ化したり、JavaScriptでグラフを作り、Web上で公開することができるようになった。 5.最後にPythonは扱いやすい言語と言われているが本当にそう感じた。JavaScriptを用いてグラフ出力をやってみたいと思っている。 参考・PythonでCSVファイルを読み込み・書き込み（入力・出力）・prog-8.com","link":"/2021/03/06/loadcell-to-csv/"},{"title":"Google Adsenseに通った話","text":"はじめにGoogle Adsenseに通ったため、その経緯をまとめる。 目次 1.Google Adsenseとは 2.申し込み 3.審査 1.Google AdsenseとはGoogle Adsenseとは、Googleが提供しているコンテンツ連動型広告サービスであり、内容はコンテンツに連動したものか、ユーザーのGoogle検索履歴をCokkieに保存し、それに適した広告が自動配信されるものである。初期費用や月額料金などはかからず、サイトを所有していれば誰でも申し込み可能ではあるが、Googleの審査を通過する必要がある。 コンテンツ連動型広告サービスって？そのウェブサイト内のコンテンツに応じた広告を掲示することにより、ユーザーの嗜好が合う広告を配信することができ、無関係なものより、より効率的に収益を得ることができるもの。 2.申し込みAdsense プログラムポリシーを参考に、このサイトを申し込みたかったのだが、サブドメイン扱いになってしまい、申し込むことができなかったので、昔作っていたサイトで申し込んだ。 3.審査審査自体は3/5に申し込んだ、正直通ると思ってはおらず、どんなコンテンツが通るのかなどと調べていたが、3/10、審査に通っていた。何故なのだろう…しばらくの期間書いていたことが功をなしたのか・・・。Google Search Consoleにもサイトマップを送信し、しばらくかかっていたが同じく3/10辺りには通っていたので、時間がかかるものなのか、それともユーザーが同じだったから同じタイミングでされたのか・・・ サイトマップって？サイトの構造をxml形式で記したもの、クローラーはここを見て検索欄に乗せたりする。 少なくとも、Adsenseには通り、Googleの検索欄にもそのうち乗せることができると思う。楽しみつつ、コンテンツを書いていきたいなと思った。","link":"/2021/03/10/passed-google-adsence/"},{"title":"あの日から十年経って。","text":"Mastodonを眺めていたら3.11を扱ったnoteが流れてきた。読み終わって、もう十年かぁ…と思っていたが、自分の中でかなりの部分を忘れかけていることに気付いた。これは残すべきだ、伝えていくべき事項だと思っているため、ここに書き残すとする。 地震当時私は当時9歳(小学三年生)だった。その時は五時間目が終わり、帰りの支度をするために、ランドセルを取りに行こうとしたら地震が発生。「早く隠れて！」と担任の慌てた声。急いで机に戻り、頭を守ったことを覚えている。 しばらくしたら地震が収まり避難が始まったが、避難する際にもまた地震が発生、私の教室はランドセルを収納する棚があり、その上に水筒を置いていた。ドタドタと倒れてきた。それほど揺れているのかと恐怖を感じた。するすると階段を降り(ほぼ押されていたような気もするが)、校庭の中央に避難した。その前にも避難訓練というものはしていたが、はじめて直面した時、人間はその通りをとれないんだなと感じた。 先生方は児童が全員いるか数えていた、泣いてる児童もいた。 帰宅しばらくすると親父が迎えに来た。地震が起きて皆迎えに来ると思い、徒歩できたらしい。家から30分程度のとこに学校があったため、待ち時間は長く不安だったのを覚えている。道はガタガタだった。家についても電気は止まっていたが、母、弟と居て、家族や家は何ともなく、机が倒れた程度だった。その日はジャンパーを着て、炬燵に足を突っ込み、雑魚寝したことを覚えている。 次の日弟が腹痛を起こし、かかりつけの病院に行くことになった。車に乗り、ワンセグを付けたとたん、日本が黄色やら赤の線に覆われていた。そう、津波だ。あの一夜で多くの人が被害にあい、多くの人が亡くなったのだろう。とても怖かった。病院についたが、事情で診ることができず、県内の大きな病院に行くことになった。(記憶があいまいではあるが多分そう)大きな病院に入院することが決まり、弟は小さかったので、母親も一緒に残ることとなった。この時、母親はお腹に子供を宿していて、何かあってもいいようにとのことだったのだろう。憶測ではあるが。 帰宅親父と二人で家に帰った。、とても暗かった。車のヘッドライトのみが、辺りを照らす光だったことを覚えている。家につき、いつ、天井が崩れてくるか不安になりながら寝たことを覚えている。 終わりに実はかなりの間、電気が通らず、情報すら入ってきていない状態が続いていて、津波が来ていたことは把握していたのだが、原発があれほどなことになっているとは知らず、後で調べていて驚いた覚えがある。そのほかにも多くの人が被害にあい、亡くなった。親父が水が止まると考え、風呂に水をためていたり、知識があったからあまり苦労した記憶がないのだろう。一つ思い出したことといえば、風呂に入れず、親父の会社の後輩の家にお邪魔し、お風呂を借りたことくらいだ。 人は時が経てば忘れてしまう。忘れてしまえばそのことはなかったことになってしまう。被災して生き残っているのだから、後世に伝えていくことが責任だと思っている。私は毎年、この時期になったら起きたことを思い出し、忘れないようにしたい。","link":"/2021/03/10/2021-311/"}],"tags":[{"name":"loadcell","slug":"loadcell","link":"/tags/loadcell/"},{"name":"hx711","slug":"hx711","link":"/tags/hx711/"},{"name":"Fallout4","slug":"Fallout4","link":"/tags/Fallout4/"},{"name":"hexo-theme-apollo","slug":"hexo-theme-apollo","link":"/tags/hexo-theme-apollo/"},{"name":"hexo-theme-icarus","slug":"hexo-theme-icarus","link":"/tags/hexo-theme-icarus/"},{"name":"share-botton","slug":"share-botton","link":"/tags/share-botton/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"github-pages","slug":"github-pages","link":"/tags/github-pages/"},{"name":"母の裁縫日記","slug":"母の裁縫日記","link":"/tags/%E6%AF%8D%E3%81%AE%E8%A3%81%E7%B8%AB%E6%97%A5%E8%A8%98/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Adsense","slug":"Adsense","link":"/tags/Adsense/"},{"name":"地震","slug":"地震","link":"/tags/%E5%9C%B0%E9%9C%87/"}],"categories":[{"name":"RaspberryPi","slug":"RaspberryPi","link":"/categories/RaspberryPi/"},{"name":"Game","slug":"Game","link":"/categories/Game/"},{"name":"blog","slug":"blog","link":"/categories/blog/"},{"name":"loadcell","slug":"RaspberryPi/loadcell","link":"/categories/RaspberryPi/loadcell/"},{"name":"PC","slug":"Game/PC","link":"/categories/Game/PC/"},{"name":"hexo","slug":"blog/hexo","link":"/categories/blog/hexo/"},{"name":"hx711","slug":"RaspberryPi/loadcell/hx711","link":"/categories/RaspberryPi/loadcell/hx711/"},{"name":"theme","slug":"blog/hexo/theme","link":"/categories/blog/hexo/theme/"},{"name":"share-botton","slug":"blog/hexo/share-botton","link":"/categories/blog/hexo/share-botton/"},{"name":"ubuntu","slug":"ubuntu","link":"/categories/ubuntu/"},{"name":"github-pages","slug":"blog/hexo/github-pages","link":"/categories/blog/hexo/github-pages/"},{"name":"Python","slug":"RaspberryPi/loadcell/Python","link":"/categories/RaspberryPi/loadcell/Python/"},{"name":"雑記","slug":"雑記","link":"/categories/%E9%9B%91%E8%A8%98/"},{"name":"csv","slug":"RaspberryPi/loadcell/Python/csv","link":"/categories/RaspberryPi/loadcell/Python/csv/"}]}